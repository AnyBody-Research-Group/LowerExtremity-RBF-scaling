#define  MotionAndParameterOptimizationModel 0
#define InverseDynamicModel 1
#define HumanModelPresent 1
#define LoadInverseDynamicModel 
#define SaveAllResults 

#define EXLCUDE_TRUNK_MARKERS

#ifndef INCLUDE_MUSCLE_WEIGHT_FACTOR 
#define INCLUDE_MUSCLE_WEIGHT_FACTOR 1
#endif




Main = {
  #include "ModelSetup.any" 
  
  AnyProject Project = {  
  #include "<PROJECT_PATH>/Subjects/TrialSelector.any"
  };   
  //  Run the operation InverseDynamicAnalysisSequence to calibrate the model and run inverse dynamic analysis.
  AnyOperationMacro InverseDynamicAnalysisSequence = { 
    MacroStr={
      "classoperation Main.Studies.LoadParametersOptimizationResults" + " " + strquote("Load design") + " --file=" + strquote(FilePathCompleteOf(Main.ModelSetup.FileNames.OptimizedParameters )),
//      "classoperation Main" + strformat("\x22")+ "Update Values" + strformat("\x22"),
      "operation Main.Studies.HumanModel.Calibration.CalibrationSequence",
      "run",
      "operation Main.Studies.InverseDynamicStudy.JointAnglesAndMoments.LoadStaticFrames",
      "run",
      "operation Main.Studies.InverseDynamicStudy.InverseDynamics",
      "run"
    };
  };
  
  AnyOperationMacro SaveResults = { 
    MacroStr={
    "classoperation Main.Studies.InverseDynamicStudy.Output" + " " + strquote("Save data") + " --file=" + strquote(FilePathCompleteOf(Main.ModelSetup.FileNames.Results )) + " --type=Deep"
    };
  };
  
   AnyOperationMacro LoadResults = { 
    MacroStr={
     "classoperation Main.Studies.LoadParametersOptimizationResults" + strquote("Load design")+ " --file="+ strquote(FilePathCompleteOf(Main.ModelSetup.FileNames.OptimizedParameters) ),
     "classoperation Main" + strquote("Update Values"),
     "classoperation Main.Studies.InverseDynamicStudy.Output" + " " + strquote("Load data") + " --file=" + strquote(FilePathCompleteOf(Main.ModelSetup.FileNames.Results )) 
   
   };
  };  
  
  #include "DrawSettings.any"
  
  AnyFolder Studies ={
    
    //This study is used for running the inverse dynamic analysis of the optimized motion
    //***********************************************************************************
    HumanModel={
      AnyFolder &Mannequin=.InverseDynamicStudy.Mannequin;
      #include  "BodyPartsSetupInv.any"
      
      // Check that the body model uses a modified version of the knee and ankle joint
        AnyMessage Ammr_check = {
          TriggerConst = neqfun(.BodyModel.Right.Leg.CadaverParameters.Thigh.KneeJoint[0]  , 0.04423707  );
           Type = MSG_ErrorFatal;
           Message = "The model is not using a modified AMMR. The joint parameters have to be changed so the ankle and knee joint are translated along the axis to lie between the bony landmarks.";
        };
      
    };
    #include "HumanModel.any"
    
    AnyBodyStudy InverseDynamicStudy = {
      #include "<SHARED_FILES_PATH>/InverseDynamicsSettings.any"
      
      
      AnyFolder &C3DData=..ModelSetup.C3DFileData ;
      AnyFolder HumanModel = {
         AnyFolder &BodyModel=..HumanModel.BodyModel;
      };
      #include "Mannequin.any" 
      
      // Includes Analog data (EMG and Kneeforces) from the
      // C3D structure in the output structure
      #include "ValidationOutput.any"
  
//  #if GrandChallageDataSet == 2012     
      #include "InstrumentedKnee.any"
//  #else
//      #include "InstrumentedRightKnee.any"
//  #endif
    #include "JointAnglesAndMoments.any"
      #include "JointReactionForces.any"
      //Environment around the human
      AnyFolder EnvironmentModel ={
        
        AnyFolder DrawC3DMarkers = {};
        AnyFolder &BodyModelRef=..HumanModel.BodyModel;
        #include "Environment.any"
      };
      
      //Connection between environment and the human    
      AnyFolder ModelEnvironmentConnection = {
        #include "JointsAndDriversOptimized.any"      
      };
            
      tStart = Main.ModelSetup.tStart;
      tEnd = Main.ModelSetup.tEnd;
      nStep = Main.ModelSetup.nStep;
      
      #ifdef INCLUDE_MUSCLE_WEIGHT_FACTOR 
      #if INCLUDE_MUSCLE_WEIGHT_FACTOR > 0
      InverseDynamics.Criterion.PrimaryTerm.Weight_SearchName = "WeightFactor";
      Main = {AnyVar Power = .InverseDynamics.Criterion.Power;};
      #endif
      #endif
      
      #ifndef EXCLUDE_ALL_MUSCLES
      AnyFolder &MusPar= Main.Studies.HumanModel.BodyModel.Left.Leg.MusPar;
      #include "<SHARED_FILES_PATH>/ReduceKneeStrength.any"
      #endif
      
    };
    
    
    //This study is only used for loading the optimized parameters    
    AnyOptKinStudy LoadParametersOptimizationResults =     {
      AnyFolder &Study = .InverseDynamicStudy;
      AnyFolder &HumanModel = .HumanModel;
      ParameterOptimization.ConvergenceTol=1e-3;
      Analysis =   {
        AnyOperation &ref = .Study.Kinematics;
      };
    };
    

  };
  
  
}; //Main
#undef MotionAndParameterOptimizationModel 
#undef InverseDynamicModel
#undef LoadInverseDynamicModel 
#undef SaveAllResults

